/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CInterface extends ethers.utils.Interface {
  functions: {
    "addAdmin(address)": FunctionFragment;
    "addPost(string)": FunctionFragment;
    "addUser(address)": FunctionFragment;
    "checkAdmin(address)": FunctionFragment;
    "checkTime(address)": FunctionFragment;
    "checkUser(address)": FunctionFragment;
    "creator()": FunctionFragment;
    "getPostById(uint256)": FunctionFragment;
    "getPostNum()": FunctionFragment;
    "postMood(uint256)": FunctionFragment;
    "postNum()": FunctionFragment;
    "removePost(uint256)": FunctionFragment;
    "removeUser(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "addPost", values: [string]): string;
  encodeFunctionData(functionFragment: "addUser", values: [string]): string;
  encodeFunctionData(functionFragment: "checkAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "checkTime", values: [string]): string;
  encodeFunctionData(functionFragment: "checkUser", values: [string]): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPostById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPostNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postMood",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "postNum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeUser", values: [string]): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPostById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPostNum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postMood", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postNum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removePost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeUser", data: BytesLike): Result;

  events: {
    "Moody(address,uint256)": EventFragment;
    "NewPost(address,uint256,string,uint256)": EventFragment;
    "OnboardAdmin(address)": EventFragment;
    "OnboardUser(address)": EventFragment;
    "PostRemoved(uint256,address)": EventFragment;
    "UserRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Moody"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnboardAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnboardUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRemoved"): EventFragment;
}

export class C extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CInterface;

  functions: {
    addAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPost(
      content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPost(string)"(
      content: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addUser(
      newUser: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addUser(address)"(
      newUser: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkAdmin(admin: string, overrides?: CallOverrides): Promise<[boolean]>;

    "checkAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "checkTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    checkUser(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    "checkUser(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    "creator()"(overrides?: CallOverrides): Promise<[string]>;

    getPostById(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, boolean, string, BigNumber]>;

    "getPostById(uint256)"(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, boolean, string, BigNumber]>;

    getPostNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPostNum()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    postMood(
      postID: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "postMood(uint256)"(
      postID: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    postNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    "postNum()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removePost(
      postID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removePost(uint256)"(
      postID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeUser(
      removedUser: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeUser(address)"(
      removedUser: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addAdmin(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAdmin(address)"(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPost(content: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addPost(string)"(
    content: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addUser(newUser: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addUser(address)"(
    newUser: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkAdmin(admin: string, overrides?: CallOverrides): Promise<boolean>;

  "checkAdmin(address)"(
    admin: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkTime(
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "checkTime(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  checkUser(user: string, overrides?: CallOverrides): Promise<boolean>;

  "checkUser(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  creator(overrides?: CallOverrides): Promise<string>;

  "creator()"(overrides?: CallOverrides): Promise<string>;

  getPostById(
    postID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber, boolean, string, BigNumber]>;

  "getPostById(uint256)"(
    postID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber, boolean, string, BigNumber]>;

  getPostNum(overrides?: CallOverrides): Promise<BigNumber>;

  "getPostNum()"(overrides?: CallOverrides): Promise<BigNumber>;

  postMood(
    postID: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "postMood(uint256)"(
    postID: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  postNum(overrides?: CallOverrides): Promise<BigNumber>;

  "postNum()"(overrides?: CallOverrides): Promise<BigNumber>;

  removePost(
    postID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removePost(uint256)"(
    postID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeUser(
    removedUser: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeUser(address)"(
    removedUser: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    "addAdmin(address)"(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPost(content: string, overrides?: CallOverrides): Promise<void>;

    "addPost(string)"(
      content: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addUser(newUser: string, overrides?: CallOverrides): Promise<void>;

    "addUser(address)"(
      newUser: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAdmin(admin: string, overrides?: CallOverrides): Promise<boolean>;

    "checkAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "checkTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    checkUser(user: string, overrides?: CallOverrides): Promise<boolean>;

    "checkUser(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    creator(overrides?: CallOverrides): Promise<string>;

    "creator()"(overrides?: CallOverrides): Promise<string>;

    getPostById(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, boolean, string, BigNumber]>;

    "getPostById(uint256)"(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, boolean, string, BigNumber]>;

    getPostNum(overrides?: CallOverrides): Promise<BigNumber>;

    "getPostNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    postMood(postID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "postMood(uint256)"(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    postNum(overrides?: CallOverrides): Promise<BigNumber>;

    "postNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    removePost(postID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "removePost(uint256)"(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeUser(removedUser: string, overrides?: CallOverrides): Promise<void>;

    "removeUser(address)"(
      removedUser: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Moody(moodster: null, postID: null): EventFilter;

    NewPost(
      author: null,
      timestamp: null,
      content: null,
      postID: null
    ): EventFilter;

    OnboardAdmin(admin: null): EventFilter;

    OnboardUser(user: null): EventFilter;

    PostRemoved(postID: null, removedBy: null): EventFilter;

    UserRemoved(removedUser: null, removedBy: null): EventFilter;
  };

  estimateGas: {
    addAdmin(newAdmin: string, overrides?: Overrides): Promise<BigNumber>;

    "addAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPost(content: string, overrides?: Overrides): Promise<BigNumber>;

    "addPost(string)"(
      content: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addUser(newUser: string, overrides?: Overrides): Promise<BigNumber>;

    "addUser(address)"(
      newUser: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkAdmin(admin: string, overrides?: CallOverrides): Promise<BigNumber>;

    "checkAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkTime(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "checkTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUser(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "checkUser(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    "creator()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPostById(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPostById(uint256)"(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPostNum(overrides?: CallOverrides): Promise<BigNumber>;

    "getPostNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    postMood(
      postID: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "postMood(uint256)"(
      postID: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    postNum(overrides?: CallOverrides): Promise<BigNumber>;

    "postNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    removePost(postID: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "removePost(uint256)"(
      postID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeUser(removedUser: string, overrides?: Overrides): Promise<BigNumber>;

    "removeUser(address)"(
      removedUser: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPost(
      content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPost(string)"(
      content: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addUser(
      newUser: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addUser(address)"(
      newUser: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkAdmin(
      admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkUser(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPostById(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPostById(uint256)"(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPostNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPostNum()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postMood(
      postID: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "postMood(uint256)"(
      postID: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    postNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "postNum()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePost(
      postID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removePost(uint256)"(
      postID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeUser(
      removedUser: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeUser(address)"(
      removedUser: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
